{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Petrophysics_Mineral_Fraction.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOV51bmtgnYHZZy7rnXgJY0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yohanesnuwara/formation-evaluation/blob/main/Petrophysics_Mineral_Fraction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OIyTZRIHN5qg"
      },
      "source": [
        "## Mineral Fraction Calculation - Simple 4x4 Matrix Solver for 4 Petrophysical Variables "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iGB0Hc7ZHZpk",
        "outputId": "021d5a6d-c015-438c-ac87-6b38ecdae3d3"
      },
      "source": [
        "# Define measured data\n",
        "DT_meas, RHOB_meas, NPHI_meas = 75, 2.4, 0.2\n",
        "\n",
        "# Our mineral database\n",
        "DT_qtz, DT_cal, DT_dol, DT_f = 55.5, 47.5, 43.5, 189\n",
        "RHOB_qtz, RHOB_cal, RHOB_dol, RHOB_f = 2.65, 2.7, 2.8, 1.05\n",
        "NPHI_qtz, NPHI_cal, NPHI_dol, NPHI_f = -0.04, 0, 0.05, 1\n",
        "\n",
        "# Create 2D matrix for database\n",
        "A = np.array([[DT_qtz, DT_cal, DT_dol, DT_f],\n",
        "     [RHOB_qtz, RHOB_cal, RHOB_dol, RHOB_f],\n",
        "     [NPHI_qtz, NPHI_cal, NPHI_dol, NPHI_f],\n",
        "     [1, 1, 1, 1]])\n",
        "\n",
        "B = np.array([[DT_meas],\n",
        "              [RHOB_meas],\n",
        "              [NPHI_meas],\n",
        "              [1]])\n",
        "\n",
        "# Invert A matrix\n",
        "A_inv = np.linalg.inv(A)\n",
        "\n",
        "# Multiply A-1 with B to find x\n",
        "x = A_inv @ B\n",
        "\n",
        "print(x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.15414856]\n",
            " [0.39044072]\n",
            " [0.26236292]\n",
            " [0.1930478 ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pt7j0y1hKZs6",
        "outputId": "11bb06ce-326c-402d-8474-1cf37e4f2b59"
      },
      "source": [
        "X_qtz, X_cal, X_dol, porosity = x[0,:], x[1,:], x[2,:], x[3,:]\n",
        "X_qtz"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.15414856])"
            ]
          },
          "metadata": {},
          "execution_count": 235
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-ks4Vn9oJkDe"
      },
      "source": [
        "def multimin(DT_meas, RHOB_meas, NPHI_meas):\n",
        "  \"\"\"\n",
        "  This is a function to calculate mineral fractions\n",
        "  Given measured well log data\n",
        "  Assumption: Rock is composed of ONLY 3 minerals\n",
        "\n",
        "  INPUT:\n",
        "\n",
        "  DT_meas: measured sonic log\n",
        "  RHOB_meas: measured bulk density\n",
        "  NPHI_meas: measured neutron porosity\n",
        "\n",
        "  OUTPUT:\n",
        "\n",
        "  X_qtz, X_cal, X_dol, porosity: These are the fractions\n",
        "  \"\"\"\n",
        "  # Our mineral database\n",
        "  DT_qtz, DT_cal, DT_dol, DT_f = 55.5, 47.5, 43.5, 189\n",
        "  RHOB_qtz, RHOB_cal, RHOB_dol, RHOB_f = 2.65, 2.7, 2.8, 1.05\n",
        "  NPHI_qtz, NPHI_cal, NPHI_dol, NPHI_f = -0.04, 0, 0.05, 1\n",
        "\n",
        "  # Create 2D matrix for database\n",
        "  A = np.array([[DT_qtz, DT_cal, DT_dol, DT_f],\n",
        "      [RHOB_qtz, RHOB_cal, RHOB_dol, RHOB_f],\n",
        "      [NPHI_qtz, NPHI_cal, NPHI_dol, NPHI_f],\n",
        "      [1, 1, 1, 1]])\n",
        "\n",
        "  B = np.array([[DT_meas],\n",
        "                [RHOB_meas],\n",
        "                [NPHI_meas],\n",
        "                [1]])\n",
        "\n",
        "  # Invert A matrix\n",
        "  A_inv = np.linalg.inv(A)\n",
        "\n",
        "  # Multiply A-1 with B to find x\n",
        "  x = A_inv @ B  \n",
        "\n",
        "  X_qtz, X_cal, X_dol, porosity = x[0,:], x[1,:], x[2,:], x[3,:]\n",
        "\n",
        "  return X_qtz, X_cal, X_dol, porosity"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SwnM1_gTMGWM",
        "outputId": "bf3728b4-fe6b-4c03-df53-563e1d51bb08"
      },
      "source": [
        "help(multimin)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function multimin in module __main__:\n",
            "\n",
            "multimin(DT_meas, RHOB_meas, NPHI_meas)\n",
            "    This is a function to calculate mineral fractions\n",
            "    Given measured well log data\n",
            "    Assumption: Rock is composed of ONLY 3 minerals\n",
            "    \n",
            "    INPUT:\n",
            "    \n",
            "    DT_meas: measured sonic log\n",
            "    RHOB_meas: measured bulk density\n",
            "    NPHI_meas: measured neutron porosity\n",
            "    \n",
            "    OUTPUT:\n",
            "    \n",
            "    X_qtz, X_cal, X_dol, porosity: These are the fractions\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LDbS8gvzLE2l",
        "outputId": "4e6ac3e7-33a4-4c4b-fe13-f56519afffae"
      },
      "source": [
        "# Implement function\n",
        "DT_meas, RHOB_meas, NPHI_meas = 75, 2.4, 0.2\n",
        "X_qtz, X_cal, X_dol, porosity = multimin(DT_meas, RHOB_meas, NPHI_meas)\n",
        "\n",
        "print(X_qtz)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.15414856]\n"
          ]
        }
      ]
    }
  ]
}